<Window x:Class="PendleCodeMonkey.VoronoiDiagram.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PendleCodeMonkey.VoronoiDiagram"
        mc:Ignorable="d"
        Title="Voronoi Diagram Generator" Height="850" Width="1200" Loaded="Window_Loaded" SizeChanged="Window_SizeChanged">
    <Window.CommandBindings>
        <CommandBinding Command="{x:Static local:MainWindow.SaveButtonCmd}"
                    Executed="SaveButtonCmdExecuted"
                    CanExecute="SaveButtonCanExecute"/>
    </Window.CommandBindings>
    <Window.Resources>
        <local:EnumMatchToBoolConverter x:Key="enumConverter"/>
        <local:InvertedBoolConverter x:Key="invertedBoolConverter"/>
        <local:EnabledToOpacityConverter x:Key="enabledToOpacityConverter"/>
        <ControlTemplate x:Key="ValidationTemplate">
            <DockPanel>
                <StackPanel Orientation="Horizontal" DockPanel.Dock="Left">
                    <Grid Width="14" Height="14">
                        <Ellipse Width="14" Height="14" 
                            Fill="Red" HorizontalAlignment="Center" 
                            VerticalAlignment="Center">
                        </Ellipse>
                        <TextBlock Foreground="White" FontWeight="Heavy" 
                            FontSize="8" HorizontalAlignment="Center" 
                            VerticalAlignment="Center" TextAlignment="Center"
                           ToolTip="{Binding ElementName=ErrorAdorner, 
                           Path=AdornedElement.(Validation.Errors)/ErrorContent}"
                       >!</TextBlock>
                    </Grid>
                </StackPanel>
                <AdornedElementPlaceholder x:Name="ErrorAdorner" ></AdornedElementPlaceholder>
            </DockPanel>
        </ControlTemplate>

        <Style x:Key="TextBoxInError" TargetType="{x:Type TextBox}">
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip"
              Value="{Binding RelativeSource={RelativeSource Self},
                              Path=(Validation.Errors)/ErrorContent}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="CheckBox" BasedOn="{StaticResource {x:Type CheckBox}}">
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="Gray"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="RadioButton" BasedOn="{StaticResource {x:Type RadioButton}}">
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="Gray"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type ComboBox}">
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="Gray"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="10"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="10"/>
            <RowDefinition/>
            <RowDefinition Height="10"/>
        </Grid.RowDefinitions>
        <Border Grid.Row="1" Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="Black" BorderThickness="1">
            <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="Silver" BorderThickness="8">
                <Border x:Name="ImageBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="Black" BorderThickness="1">
                    <StackPanel x:Name="stackP" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Grid x:Name="ParentGrid" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" PreviewMouseLeftButtonUp="ParentGrid_PreviewMouseLeftButtonUp" PreviewMouseRightButtonUp="ParentGrid_PreviewMouseRightButtonUp">
                            <Image x:Name="img" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                            <Rectangle x:Name="SelectionRect" Width="80" Height="80" Visibility="Hidden" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="20" Stroke="White" StrokeThickness="2" Opacity="0.5" Fill="Silver"></Rectangle>
                        </Grid>
                    </StackPanel>
                </Border>
            </Border>
        </Border>
        <StackPanel Grid.Row="1" Grid.Column="2" Margin="10,0,10,0">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="32"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <GroupBox Header="Point Generation" Grid.Row="0" Margin="4">
                    <StackPanel>
                        <StackPanel Orientation="Horizontal" Margin="12,6,0,0">
                            <Label Content="Num Points:" HorizontalAlignment="Right" Margin="0,0,10,0" VerticalAlignment="Center"/>
                            <TextBox x:Name="PointsTextBox" HorizontalAlignment="Left" Margin="0,0,10,0" TextWrapping="Wrap" VerticalAlignment="Center"
                                 Validation.ErrorTemplate="{StaticResource ValidationTemplate}"
                                 Style="{StaticResource TextBoxInError}" Width="80">
                                <TextBox.Text>
                                    <Binding Path="NumberOfPoints"
                                    UpdateSourceTrigger="PropertyChanged" >
                                        <Binding.ValidationRules>
                                            <local:IntegerRangeRule Min="1" Max="500"/>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <Label Content="Anchor:" HorizontalAlignment="Right" Margin="0,0,4,0" VerticalAlignment="Center"/>
                            <ComboBox ItemsSource="{Binding AnchorDescriptions}" Margin="0,4,0,4" SelectedItem="{Binding Anchor}" Width="126"/>
                        </StackPanel>
                        <Button x:Name="GenerateButton" Content="Generate Random Points" HorizontalAlignment="Stretch" VerticalAlignment="Top" Margin="8" Padding="8" Click="GenerateButton_Click"/>
                    </StackPanel>
                </GroupBox>
                <GroupBox Header="Distance Measurement" Grid.Row="2" Margin="4">
                    <StackPanel>
                        <RadioButton Content="Manhattan" HorizontalAlignment="Left" Margin="8,8,0,0" VerticalAlignment="Top"
                                     Checked="DistanceMeasureRadioButton_Checked"
                                     IsChecked="{Binding Path=DistanceMeasure, Mode=TwoWay, 
                                         Converter={StaticResource enumConverter},
                                         ConverterParameter=Manhattan}" />
                        <RadioButton Content="Chebyshev" HorizontalAlignment="Left" Margin="8,8,0,0" VerticalAlignment="Top"
                                     Checked="DistanceMeasureRadioButton_Checked"
                                     IsChecked="{Binding Path=DistanceMeasure, Mode=TwoWay, 
                                         Converter={StaticResource enumConverter},
                                         ConverterParameter=Chebyshev}" />
                        <RadioButton Content="Euclidian" HorizontalAlignment="Left" Margin="8,8,0,0" VerticalAlignment="Top"
                                     Checked="DistanceMeasureRadioButton_Checked"
                                     IsChecked="{Binding Path=DistanceMeasure, Mode=TwoWay, 
                                         Converter={StaticResource enumConverter},
                                         ConverterParameter=Euclidian}" />
                    </StackPanel>
                </GroupBox>
            </Grid>
            <StackPanel>
                <GroupBox Margin="4">
                    <GroupBox.Header>
                        <CheckBox x:Name="ShowPointsCheckbox" Content="Show Points" HorizontalAlignment="Left" Margin="4,4,0,4" VerticalAlignment="Top" IsChecked="{Binding ShowPoints}" Checked="ShowPointsCheckBoxCheckedChanged" Unchecked="ShowPointsCheckBoxCheckedChanged"/>
                    </GroupBox.Header>
                    <StackPanel IsEnabled="{Binding ElementName=ShowPointsCheckbox, Path=IsChecked}">
                        <RadioButton Content="Contrast Rendering" HorizontalAlignment="Left" Margin="16,8,0,0" VerticalAlignment="Top"
                                         Checked="DistanceMeasureRadioButton_Checked"
                                         IsChecked="{Binding Path=PointRendering, Mode=TwoWay, 
                                             Converter={StaticResource enumConverter},
                                             ConverterParameter=Contrast}" />
                        <RadioButton Content="Enhanced Rendering" HorizontalAlignment="Left" Margin="16,8,0,4" VerticalAlignment="Top"
                                         Checked="DistanceMeasureRadioButton_Checked"
                                         IsChecked="{Binding Path=PointRendering, Mode=TwoWay, 
                                             Converter={StaticResource enumConverter},
                                             ConverterParameter=Enhanced}" />
                    </StackPanel>
                </GroupBox>
                <GroupBox Margin="4">
                    <GroupBox.Header>
                        <CheckBox x:Name="UseColourThemeCheckbox" Content="Use Colour Theme" HorizontalAlignment="Left" Margin="4,4,0,4" VerticalAlignment="Top" IsChecked="{Binding UseColourTheme, Mode=TwoWay}" Checked="CheckBox_CheckedChanged" Unchecked="CheckBox_CheckedChanged"/>
                    </GroupBox.Header>
                    <StackPanel Margin="2,4,2,4" IsEnabled="{Binding ElementName=UseColourThemeCheckbox, Path=IsChecked}">
                        <ComboBox x:Name="ThemeComboBox" Margin="4,4,4,8" HorizontalAlignment="Stretch" ItemsSource="{Binding ThemeNames}"
                                      SelectedItem="{Binding SelectedThemeName, Mode=TwoWay}" SelectionChanged="ComboBox_SelectionChanged">
                            <ComboBox.ItemTemplateSelector>
                                <local:ComboBoxItemTemplateSelector>
                                    <local:ComboBoxItemTemplateSelector.SelectedTemplate>
                                        <DataTemplate>
                                            <Grid HorizontalAlignment="Stretch">
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>
                                                <TextBlock Text="{Binding}" Width="120" HorizontalAlignment="Stretch"/>
                                                <local:ColourThemeControl ThemeName="{Binding}" Opacity="{Binding ElementName=ThemeComboBox, Path=IsEnabled, Converter={StaticResource enabledToOpacityConverter}}" Grid.Row="1" Height="20" Margin="0,0,0,4" HorizontalAlignment="Stretch"/>
                                            </Grid>
                                        </DataTemplate>
                                    </local:ComboBoxItemTemplateSelector.SelectedTemplate>
                                    <local:ComboBoxItemTemplateSelector.DropDownTemplate>
                                        <DataTemplate>
                                            <Grid HorizontalAlignment="Stretch">
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto"/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>
                                                <TextBlock Text="{Binding}" Width="120" HorizontalAlignment="Stretch"/>
                                                <local:ColourThemeControl ThemeName="{Binding}" Grid.Row="1" Height="20" Margin="0,0,0,4" HorizontalAlignment="Stretch"/>
                                            </Grid>
                                        </DataTemplate>
                                    </local:ComboBoxItemTemplateSelector.DropDownTemplate>
                                </local:ComboBoxItemTemplateSelector>
                            </ComboBox.ItemTemplateSelector>
                        </ComboBox>
                        <CheckBox x:Name="RandomizeCheckBox" Content="Random Colour Assignment" Margin="4" IsChecked="{Binding RandomizeColours, Mode=TwoWay}" Checked="CheckBox_CheckedChanged" Unchecked="CheckBox_CheckedChanged"/>
                        <CheckBox Content="Reverse Palette" Margin="4" IsEnabled="{Binding ElementName=RandomizeCheckBox, Path=IsChecked, Converter={StaticResource invertedBoolConverter}}" IsChecked="{Binding ReverseColours, Mode=TwoWay}" Checked="CheckBox_CheckedChanged" Unchecked="CheckBox_CheckedChanged"/>
                        <StackPanel Orientation="Horizontal" Margin="12,6,0,0" IsEnabled="{Binding ElementName=RandomizeCheckBox, Path=IsChecked, Converter={StaticResource invertedBoolConverter}}">
                            <Label Content="Palette Step:" HorizontalAlignment="Right" Margin="0,0,10,0" VerticalAlignment="Center"/>
                            <TextBox x:Name="PaletteStepTextBox" HorizontalAlignment="Left" Margin="0,0,10,0" TextWrapping="Wrap" VerticalAlignment="Center"
                                     Validation.ErrorTemplate="{StaticResource ValidationTemplate}"
                                     Style="{StaticResource TextBoxInError}" Width="80" LostFocus="PaletteStepTextBox_LostFocus">
                                <TextBox.Text>
                                    <Binding Path="PaletteStep"
                                        UpdateSourceTrigger="PropertyChanged" >
                                        <Binding.ValidationRules>
                                            <local:IntegerRangeRule Min="1" Max="10"/>
                                        </Binding.ValidationRules>
                                    </Binding>
                                </TextBox.Text>
                            </TextBox>
                        </StackPanel>
                    </StackPanel>
                </GroupBox>
            </StackPanel>
            <Button x:Name="SaveButton" Content="Save Voronoi Diagram" HorizontalAlignment="Stretch" VerticalAlignment="Top"
                    Margin="8,40,8,8" Padding="8" Command="{x:Static local:MainWindow.SaveButtonCmd}"/>
        </StackPanel>
    </Grid>
</Window>
